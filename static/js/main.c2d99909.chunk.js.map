{"version":3,"sources":["components/Header.jsx","components/Nav.jsx","containers/Nav.jsx","components/Read.jsx","containers/Read.jsx","components/Control.jsx","containers/Control.jsx","components/Create.jsx","containers/Create.jsx","components/Update.jsx","containers/Update.jsx","App.js","serviceWorker.js","store.js","index.js"],"names":["Header","href","onClick","this","props","bind","Component","connect","dispatch","type","Nav","tags","i","data","length","d","push","key","id","data-id","e","Number","target","dataset","title","state","contents","Read","desc","mode","welcome_content","selected_content_id","Control","preventDefault","value","window","confirm","Create","onSubmit","name","placeholder","Update","setState","onChange","onChangeHandler","App","article","className","Boolean","location","hostname","match","initState","max_content_id","createStore","action","newId","newContents","updateContents","deleteContents","filter","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2d99909.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n//Header component를 connect함수를 통해서 리덕스을 위한 가짜 component를 만들어서 import 함 \r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1><a href=\"#welcome\" onClick = {function(){\r\n                    this.props.onClick();\r\n                }.bind(this)}>Jenny's Skills</a></h1>\r\n                What I have..\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    function(dispatch){\r\n        return {\r\n            onClick : function(){\r\n                dispatch({type: 'WELCOME'})\r\n            }\r\n        }\r\n    }\r\n)(Header);\r\n//최상위 compo인 index.js에서 provider를 import해야 에러 없음\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Nav extends Component {\r\n    render() {\r\n        var tags = [];\r\n        for(var i=0; i<this.props.data.length; i++) {\r\n            var d = this.props.data[i];\r\n            tags.push(<li key = {d.id}><a href = \"#{d.title}\" data-id = {d.id} onClick = {function(e){\r\n                this.props.onClick(Number(e.target.dataset.id));  //props에 dataset.id담기(숫자로 캐스팅), container의 onclick으로\r\n            }.bind(this)}>{d.title}</a></li>)\r\n        }\r\n        return (\r\n            <nav>\r\n                <ol>\r\n                    {tags}\r\n                </ol>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n","import Nav from '../components/Nav';\r\nimport {connect} from 'react-redux';\r\n\r\nexport default connect(\r\n    function(state) {\r\n        return {data:state.contents}\r\n    },\r\n    function(dispatch) {\r\n        return {\r\n            onClick : function(id){\r\n                dispatch({type:'READ', id:id}); \r\n                //내부의 this.props.onClick(e.target.dataset.id)를 실행.인자로 id받아 store에 dispatch함\r\n                //action과 id값을 받는다. \r\n            }\r\n        }\r\n    }\r\n)(Nav);","import React, { Component } from 'react'\r\n\r\nexport default class Read extends Component {\r\n    render() {\r\n        return (\r\n            <article>\r\n                <h2>{this.props.title}</h2>\r\n                 {this.props.desc}\r\n            </article>\r\n        )\r\n    }\r\n}\r\n","import Read from '../components/Read';\r\nimport { connect } from 'react-redux';\r\n\r\nexport default connect(\r\n    function(state) {\r\n        var title, desc;\r\n        if(state.mode === 'WELCOME' ) {\r\n            title = state.welcome_content.title;\r\n            desc = state.welcome_content.desc;\r\n        } else {\r\n            for(var i =0; i<state.contents.length; i++) {\r\n                var d = state.contents[i];\r\n                if(d.id === state.selected_content_id) {\r\n                    title =  d.title;\r\n                    desc = d.desc;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return {\r\n            title : title,\r\n            desc : desc\r\n        }\r\n    }\r\n)(Read);","import React, { Component } from 'react'\r\n\r\nexport default class Control extends Component {\r\n    render() {// container가 onClick들을 받는다\r\n        return (\r\n            <ul>\r\n                <li><a href = \"create\" onClick = {function(e){\r\n                    this.props.onClick('CREATE');\r\n                    e.preventDefault();//페이지가 넘어가지 않도록 API를 넣는다\r\n                }.bind(this)}>create</a></li>\r\n                <li><a href = \"update\" onClick = {function(e){\r\n                    this.props.onClick('UPDATE');\r\n                    e.preventDefault();\r\n                }.bind(this)}>update</a></li>\r\n                <li>\r\n                    <input type=\"button\" value = \"delete\" onClick = {function(e){\r\n                        this.props.onClick('DELETE_PROCESS');\r\n                        e.preventDefault();\r\n                }.bind(this)}></input>\r\n                </li> \r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import Control from '../components/Control';\r\nimport { connect } from 'react-redux';\r\n\r\nexport default connect(null, \r\n    function(dispatch) {\r\n        return {\r\n            onClick : function(mode) {\r\n                 //creat.update.delete 버튼 눌릴때마다 onClick\r\n                if(mode === 'DELETE_PROCESS') {\r\n                    if(!window.confirm('Are you sure?')){\r\n                        return;\r\n                    }\r\n                }\r\n                 dispatch({type : mode}); //dispatch 될때마다 store로\r\n            }\r\n        }\r\n    }    \r\n)(Control);","import React, { Component } from 'react'\r\n\r\nexport default class Create extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit = {function(e) {\r\n                e.preventDefault();\r\n                this.props.onSubmit(\r\n                    e.target.title.value,\r\n                    e.target.desc.value\r\n                );\r\n            }.bind(this)}>\r\n                <p>\r\n                <input type = \"text\" name = \"title\" placeholder=\"title\"></input> \r\n                </p>\r\n                <p>\r\n                <textarea type = \"text\" name = \"desc\" placeholder=\"description\"></textarea> \r\n                </p>\r\n                <p><input type=\"submit\" value = \"SUBMIT\"></input></p>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import Create from '../components/Create';\r\nimport { connect } from 'react-redux';\r\n\r\n//event를 받으므로 두번째 인자에\r\nexport default connect(\r\n    null,\r\n    function(dispatch) {\r\n        return {\r\n            onSubmit : function(title, desc) {\r\n                dispatch({type : 'CREATE_PROCESS', title, desc});\r\n            }\r\n        }\r\n    }\r\n)(Create);","import React, { Component } from 'react'\r\n\r\nexport default class Update extends Component {\r\n    state = {\r\n        id:this.props.id,\r\n        title : this.props.title,\r\n        desc : this.props.desc\r\n    }\r\n    onChangeHandler(e) {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit = {function(e) {\r\n                e.preventDefault();\r\n                this.props.onSubmit(\r\n                    Number(e.target.id.value),\r\n                    e.target.title.value,\r\n                    e.target.desc.value\r\n                );\r\n            }.bind(this)}>\r\n                <input type=\"hidden\" name=\"id\" value={this.state.id}></input>\r\n                <p>\r\n                <input type = \"text\" name = \"title\" onChange={this.onChangeHandler.bind(this)} placeholder=\"title\" value={this.state.title}></input> \r\n                </p>\r\n                <p>\r\n                <textarea type = \"text\" name = \"desc\" onChange={this.onChangeHandler.bind(this)} placeholder=\"description\" value={this.state.desc}></textarea> \r\n                </p>\r\n                <p><input type=\"submit\" value = \"SUBMIT\"></input></p>\r\n            </form>\r\n        )//제목,desc에 수정데이터가 넣어졌을때 onChange 이벤트\r\n    }\r\n}\r\n","import Update from '../components/Update';\r\nimport { connect } from 'react-redux';\r\n\r\nexport default connect(\r\n    function(state){\r\n        var title, desc, id;\r\n        for(var i =0; i<state.contents.length; i++) {\r\n            var d = state.contents[i];\r\n            if(d.id === state.selected_content_id) {\r\n                title =  d.title;\r\n                desc = d.desc;\r\n                id = d.id;\r\n                break;\r\n            }\r\n        }\r\n        return {\r\n            title,\r\n            desc, \r\n            id\r\n        }\r\n    },\r\n    function(dispatch){\r\n        return {\r\n            onSubmit : function(id,title,desc){\r\n                dispatch({type : 'UPDATE_PROCESS', id, title, desc})\r\n            }\r\n        }\r\n    }\r\n)(Update);","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport NavContainer from \"./containers/Nav\";\nimport ReadContainer from \"./containers/Read\";\nimport ControlContainer from './containers/Control';\nimport CreateContainer from './containers/Create';\nimport UpdateContainer from './containers/Update';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  render(){\n    var article = null;\n    if(this.props.mode === 'READ') {\n      article = <ReadContainer></ReadContainer>    \n    }else if (this.props.mode === 'WELCOME'){\n      article = <ReadContainer></ReadContainer>\n    }else if (this.props.mode === 'CREATE'){\n      article = <CreateContainer></CreateContainer>\n    }else if (this.props.mode === 'UPDATE'){\n      article = <UpdateContainer></UpdateContainer>\n    }\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <NavContainer></NavContainer>\n        <ControlContainer></ControlContainer>\n        {article}\n      </div>\n    );\n  } \n}\n\n//web 내에서 바로 export하지 않고, connect를 써서, readContainer,createContainer인지를 알 필요((redux의 상태)\nexport default connect(\n  function(state) {\n    return {\n      mode : state.mode\n    }\n  }\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from 'redux';\r\nvar initState = {\r\n    mode : 'WELCOME',\r\n    welcome_content : {\r\n        title : 'WEB DEVELOPER - Jenny Song',\r\n        desc : 'Hello, World!'\r\n    },\r\n    selected_content_id : 1,\r\n    max_content_id : 3,\r\n    contents : [\r\n        {id : 1, title : 'HTML', desc : 'HTML is ...'},\r\n        {id : 2, title : 'CSS', desc : 'CSS is ...'},\r\n        {id : 3, title : 'JS', desc : 'JS is ...'}\r\n    ]\r\n}\r\nfunction reducer(state = initState, action) {\r\n    //언제나 한번은 초기 실행되고, 그때의 값을 세팅해줌\r\n    /*\r\n    if (state === undefined) {\r\n        return initState;\r\n    }\r\n    */\r\n   if(action.type === 'WELCOME') {\r\n       //state 값을 바꿔줘야하는데 직빵으로 하면 데이터를 immutability어긋, 따라서 복제해서 사용\r\n       return {...state, mode:'WELCOME' }; //WEB클릭하면서 onclick 이벤트(Header.jsx)발생하고 action.mode를 담는다(welcome)\r\n   }\r\n   if(action.type === 'READ') {\r\n        return {...state, mode:'READ',\r\n        selected_content_id:action.id}     \r\n   }\r\n   if(action.type === 'CREATE') {\r\n       return {...state, mode:'CREATE'}\r\n   }\r\n   if(action.type === 'CREATE_PROCESS'){\r\n       var newId = state.max_content_id+1;\r\n       var newContents = [\r\n           ...state.contents,\r\n           {id : state.max_content_id+1,\r\n            title : action.title,\r\n            desc : action.desc}\r\n        ];\r\n        return {\r\n            ...state,\r\n            contents : newContents,\r\n            max_content_id:newId,\r\n            mode : 'READ',\r\n            selected_content_id:newId\r\n        };\r\n   }\r\n    if(action.type === 'UPDATE') {\r\n        return {...state, mode:'UPDATE'}\r\n    }\r\n    if(action.type === 'UPDATE_PROCESS'){\r\n         var updateContents = [\r\n            ...state.contents\r\n        ];\r\n        for(var i=0; i<updateContents.length; i++) {\r\n            if(updateContents[i].id === action.id){\r\n                updateContents[i].title = action.title;\r\n                updateContents[i].desc = action.desc;\r\n            }\r\n        }\r\n         return {\r\n             ...state,\r\n             contents : updateContents,\r\n             mode : 'READ',\r\n             selected_content_id:action.id\r\n         };\r\n    }\r\n    if(action.type === 'DELETE_PROCESS'){\r\n        var deleteContents = state.contents.filter(function(e){\r\n            if(e.id === state.selected_content_id) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })//immutable하게 삭제해야 하므로 filter함수\r\n        return {\r\n            ...state,\r\n            contents : deleteContents,\r\n            mode:'WELCOME'\r\n        }\r\n    }\r\n   return state;\r\n}\r\nexport default createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n//redux dev tool를 사용하기 위해서 두번째 인자로..","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store'; //comp마다 매번 import하는 게 아니라, 저리하면 한방에\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}